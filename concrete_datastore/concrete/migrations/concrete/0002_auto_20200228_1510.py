# Generated by Django 2.2.10 on 2020-02-28 15:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('concrete', '0001_initial'),
        ('concrete_auth', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='usine',
            name='can_admin_groups',
            field=models.ManyToManyField(blank=True, related_name='group_administrable_usines', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='usine',
            name='can_admin_users',
            field=models.ManyToManyField(blank=True, related_name='administrable_usines', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usine',
            name='can_view_groups',
            field=models.ManyToManyField(blank=True, related_name='group_viewable_usines', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='usine',
            name='can_view_users',
            field=models.ManyToManyField(blank=True, related_name='viewable_usines', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usine',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_usines', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userconfirmation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='confirmations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='temporarytoken',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='temporary_tokens', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='task',
            name='can_admin_groups',
            field=models.ManyToManyField(blank=True, related_name='group_administrable_tasks', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='task',
            name='can_admin_users',
            field=models.ManyToManyField(blank=True, related_name='administrable_tasks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='task',
            name='can_view_groups',
            field=models.ManyToManyField(blank=True, related_name='group_viewable_tasks', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='task',
            name='can_view_users',
            field=models.ManyToManyField(blank=True, related_name='viewable_tasks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='task',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tasks', to='concrete.Category'),
        ),
        migrations.AddField(
            model_name='task',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_tasks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='secureconnecttoken',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='secure_connect_tokens', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='passwordchangetoken',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reset_password_tokens', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lieusecondaire',
            name='can_admin_groups',
            field=models.ManyToManyField(blank=True, related_name='group_administrable_lieusecondaires', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='lieusecondaire',
            name='can_admin_users',
            field=models.ManyToManyField(blank=True, related_name='administrable_lieusecondaires', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lieusecondaire',
            name='can_view_groups',
            field=models.ManyToManyField(blank=True, related_name='group_viewable_lieusecondaires', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='lieusecondaire',
            name='can_view_users',
            field=models.ManyToManyField(blank=True, related_name='viewable_lieusecondaires', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lieusecondaire',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_lieusecondaires', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lieusecondaire',
            name='lieu_primaire',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='lieu_secondaires', to='concrete.LieuPrimaire'),
        ),
        migrations.AddField(
            model_name='lieuprimaire',
            name='atelier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='lieu_primaires', to='concrete.Atelier'),
        ),
        migrations.AddField(
            model_name='lieuprimaire',
            name='can_admin_groups',
            field=models.ManyToManyField(blank=True, related_name='group_administrable_lieuprimaires', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='lieuprimaire',
            name='can_admin_users',
            field=models.ManyToManyField(blank=True, related_name='administrable_lieuprimaires', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lieuprimaire',
            name='can_view_groups',
            field=models.ManyToManyField(blank=True, related_name='group_viewable_lieuprimaires', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='lieuprimaire',
            name='can_view_users',
            field=models.ManyToManyField(blank=True, related_name='viewable_lieuprimaires', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lieuprimaire',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_lieuprimaires', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='intervention',
            name='can_admin_groups',
            field=models.ManyToManyField(blank=True, related_name='group_administrable_interventions', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='intervention',
            name='can_admin_users',
            field=models.ManyToManyField(blank=True, related_name='administrable_interventions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='intervention',
            name='can_view_groups',
            field=models.ManyToManyField(blank=True, related_name='group_viewable_interventions', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='intervention',
            name='can_view_users',
            field=models.ManyToManyField(blank=True, related_name='viewable_interventions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='intervention',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_interventions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='intervention',
            name='lieu_secondaire',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='interventions', to='concrete.LieuSecondaire'),
        ),
        migrations.AddField(
            model_name='intervention',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='interventions', to='concrete.Task'),
        ),
        migrations.AddField(
            model_name='helptext',
            name='can_admin_groups',
            field=models.ManyToManyField(blank=True, related_name='group_administrable_helptexts', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='helptext',
            name='can_admin_users',
            field=models.ManyToManyField(blank=True, related_name='administrable_helptexts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='helptext',
            name='can_view_groups',
            field=models.ManyToManyField(blank=True, related_name='group_viewable_helptexts', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='helptext',
            name='can_view_users',
            field=models.ManyToManyField(blank=True, related_name='viewable_helptexts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='helptext',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_helptexts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='emaildevice',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_emaildevices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='emaildevice',
            name='user',
            field=models.ForeignKey(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='email',
            name='can_admin_groups',
            field=models.ManyToManyField(blank=True, related_name='group_administrable_emails', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='email',
            name='can_admin_users',
            field=models.ManyToManyField(blank=True, related_name='administrable_emails', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='email',
            name='can_view_groups',
            field=models.ManyToManyField(blank=True, related_name='group_viewable_emails', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='email',
            name='can_view_users',
            field=models.ManyToManyField(blank=True, related_name='viewable_emails', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='email',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_emails', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='email',
            name='defaultdivider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='divider_emails', to='concrete.DefaultDivider'),
        ),
        migrations.AddField(
            model_name='email',
            name='receiver',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='received_emails', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='category',
            name='can_admin_groups',
            field=models.ManyToManyField(blank=True, related_name='group_administrable_categorys', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='category',
            name='can_admin_users',
            field=models.ManyToManyField(blank=True, related_name='administrable_categorys', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='category',
            name='can_view_groups',
            field=models.ManyToManyField(blank=True, related_name='group_viewable_categorys', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='category',
            name='can_view_users',
            field=models.ManyToManyField(blank=True, related_name='viewable_categorys', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='category',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_categorys', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='atelier',
            name='can_admin_groups',
            field=models.ManyToManyField(blank=True, related_name='group_administrable_ateliers', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='atelier',
            name='can_admin_users',
            field=models.ManyToManyField(blank=True, related_name='administrable_ateliers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='atelier',
            name='can_view_groups',
            field=models.ManyToManyField(blank=True, related_name='group_viewable_ateliers', to='concrete_auth.Group'),
        ),
        migrations.AddField(
            model_name='atelier',
            name='can_view_users',
            field=models.ManyToManyField(blank=True, related_name='viewable_ateliers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='atelier',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_ateliers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='atelier',
            name='usine',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ateliers', to='concrete.Usine'),
        ),
    ]
