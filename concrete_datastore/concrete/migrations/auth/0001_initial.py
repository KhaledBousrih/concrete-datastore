# Generated by Django 2.2.10 on 2020-02-28 15:10

import concrete_datastore.concrete.models
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pendulum.pendulum
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('concrete', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('public', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('password_modification_date', models.DateField(default=datetime.date.today)),
                ('subscription_notification_token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('login_counter', models.IntegerField(default=0)),
                ('external_auth', models.BooleanField(default=False)),
                ('first_name', models.CharField(blank=True, default='', max_length=250)),
                ('last_name', models.CharField(blank=True, default='', max_length=250)),
                ('unsubscribe_all', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('defaultdividers', models.ManyToManyField(blank=True, related_name='divider_users', to='concrete.DefaultDivider')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('unsubscribe_to', models.ManyToManyField(blank=True, related_name='unsubscribed_users', to='concrete.DefaultDivider')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', concrete_datastore.concrete.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('public', models.BooleanField(default=False)),
                ('name', models.CharField(blank=True, default='', max_length=250)),
                ('can_admin_groups', models.ManyToManyField(blank=True, related_name='group_administrable_groups', to='concrete_auth.Group')),
                ('can_admin_users', models.ManyToManyField(blank=True, related_name='administrable_groups', to=settings.AUTH_USER_MODEL)),
                ('can_view_groups', models.ManyToManyField(blank=True, related_name='group_viewable_groups', to='concrete_auth.Group')),
                ('can_view_users', models.ManyToManyField(blank=True, related_name='viewable_groups', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_groups', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(related_name='concrete_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ConcreteRole',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_concreteroles', to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(blank=True, related_name='concrete_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='ConcretePermission',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('model_name', models.CharField(max_length=255, unique=True)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('create_roles', models.ManyToManyField(blank=True, related_name='create_permissions', to='concrete_auth.ConcreteRole')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_concretepermissions', to=settings.AUTH_USER_MODEL)),
                ('delete_roles', models.ManyToManyField(blank=True, related_name='delete_permissions', to='concrete_auth.ConcreteRole')),
                ('retrieve_roles', models.ManyToManyField(blank=True, related_name='retrieve_permissions', to='concrete_auth.ConcreteRole')),
                ('update_roles', models.ManyToManyField(blank=True, related_name='update_permissions', to='concrete_auth.ConcreteRole')),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
            },
        ),
        migrations.CreateModel(
            name='AuthToken',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('expired', models.BooleanField(default=False)),
                ('expiration_date', models.DateTimeField(default=concrete_datastore.concrete.models.compute_auth_token_expiry)),
                ('last_action_date', models.DateTimeField(default=pendulum.pendulum.Pendulum.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auth_tokens', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Token',
                'verbose_name_plural': 'Tokens',
            },
        ),
    ]
